{"name":"Plex/nose Example","tagline":"Getting started with Plex channels and nose","body":"## About\r\n\r\nThis should show how to get Plex and nose working together.\r\n\r\n![example-output]\r\n\r\n## Requirements\r\n\r\nYou are expected to have Plex Media Server installed, of course.\r\n\r\n## Setup\r\n\r\nThis very repository is a functioning Gamespot.com channel.\r\nPlease feel free to clone and start hacking.\r\n\r\n### Ubuntu\r\n\r\n```bash\r\ngit clone git://github.com/mikew/plex-nose-example.git\r\ncd plex-nose-example/\r\n./run-ubuntu.sh Contents/Tests/test_....py # run specific tests\r\n./run-ubuntu.sh Contents/Tests/ # run all tests\r\n```\r\n\r\n### OS X\r\n\r\n```bash\r\ngit clone git://github.com/mikew/plex-nose-example.git\r\ncd plex-nose-example/\r\n./run-osx.sh Contents/Tests/test_....py # run specific tests\r\n./run-osx.sh Contents/Tests/ # run all tests\r\n```\r\n\r\n### Windows\r\n\r\n**Note:** Tests seem to run *much* faster when the server is left running.\r\n\r\n```dos\r\ngit clone git://github.com/mikew/plex-nose-example.git\r\ncd plex-nose-example\\\r\n.\\run-windows.bat Contents\\Tests\\test_....py # run specific tests\r\n.\\run-windows.bat Contents\\Tests # run all tests\r\n```\r\n\r\n### Other Operating Systems\r\n\r\nTo run the tests, you need to grab the environment variables that Plex\r\nchannels are run with. Install `plex-nose-example.bundle` as you would\r\nany other Plex channel, [visit  /video/plex-nose-example/env][env-demo]\r\nand note the contents of the `message` attribute. You are free to\r\nshut down the server after this.\r\n\r\nIn addition to this, you must find the path to the media server's\r\n`Framework.bundle/.../Versions/2/Python` and assign it to\r\n`ENV[PLEX_FRAMEWORK_PATH]`\r\n\r\n```bash\r\nenv PLEX_FRAMEWORK_PATH=\"...\" ... python Contents/Tests/nose_runner.py /full/path/to/Contents/Tests/test_....py\r\n```\r\n\r\nNote the `/full/path/to/...` requirement.\r\n\r\n### Integrating with existing channels\r\n\r\nNo modification to existing code is necessary, but you will need some files from this repository:\r\n\r\n```\r\nContents/Libraries/Shared/nose/\r\nContents/Libraries/Shared/plex_nose.py\r\nContents/Libraries/Shared/spec.py\r\nContents/Tests/nose_runner.py\r\nrun-osx.sh\r\nrun-ubuntu.sh\r\n```\r\n\r\n## Writing Tests\r\n\r\n[Nose][nose] is included and used to run the tests, so you can write\r\nsuper-quick tests:\r\n\r\n```python\r\nimport plex_nose\r\n\r\n@plex_nose.sandbox\r\ndef test():\r\n    ok_('some_data' not in Dict)\r\n```\r\n\r\nJust be sure to use the `plex_nose.sandbox` decorator.\r\n\r\nOr, to make things even easier you can just extend `plex_nose.TestCase`\r\nand stop using the decorator:\r\n\r\n```python\r\nimport plex_nose\r\n\r\nclass TestMyChannel(plex_nose.TestCase):\r\n    def test():\r\n        ok_('some_data' not in Dict)\r\n```\r\n\r\nNote that the function definition is `def test():` and not `def test(self):`\r\nas you would expect. This is due to the fact that different parts of\r\nchannel code are run in different sandboxes, there is no concept of `self`.\r\n\r\nEither way, the tests are run in the exact\\* environment as if they were\r\nlaunched by the media server, but in a *fraction* of the time.\r\n\r\n\\* Well, not exact. The `Dict` is cleaned after each run, and the log file\r\nis `./test.log` during the test runs.\r\n\r\n### Helpers\r\n\r\nAs mentioned earlier, nose is included, so `eq_` and `ok_` are made\r\navailable to tests. In addition, there is also `eqL_`, `eqF_` and `eqcb_`.\r\nThese tests against localization keys and callbacks.\r\n\r\n```python\r\nclass TestCaseHelpers(plex_unit.TestCase):\r\n    def test_eqL():\r\n        subject = L('some-key')\r\n        eqL_(subject, 'some-key')\r\n        # vs. eq_(subject._key, 'some-key')\r\n\r\n    def test_eqF():\r\n        subject = F('formatted-string', 'param')\r\n        eqF_(subject, 'formatted-string')\r\n        # vs. eq_(subject._key.string1._key, 'formatted-string')\r\n\r\n    def test_eqcb():\r\n        subject = DirectoryObject(key = Callback(Videos, section = 'all'))\r\n        eqcb_(subject.key, Videos, section = 'all')\r\n        # vs. eq_(subject.key, Callback(Videos, section = 'all'))\r\n```\r\n\r\nCode written in the tests won't have access to `file` or `open`, which is\r\nnecessary to mock data in tests some times. Use `plex_nose.publish_local_file`\r\nin these situations.\r\n\r\n```python\r\nclass TestPublishLocalFile(plex_nose.TestCase):\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        plex_nose.publish_local_file('Contents/Tests/all_videos.html',\r\n            name = 'all_videos')\r\n\r\n    def test():\r\n        import mock\r\n        mocked = HTML.ElementFromString(all_videos)\r\n        @mock.patch.object(HTML, 'ElementFromURL', return_value = mocked)\r\n        def test_inner(*a):\r\n            subject = HTML.ElementFromURL(...)\r\n            # TODO: write actual tests here\r\n```\r\n\r\n[Mock][mock] is located in `Contents/Libraries/Shared`, but not required to run\r\nthe tests.\r\n\r\n## Guardfile\r\n\r\nWhen using the Guardfile files saved to `Contents/Tests` will be\r\nrun automatically. Files saved to `Contents/Code` will also have the\r\ncorresponding test run, should one exist.\r\n\r\nTo get up and running with the Guardfile, all you need is ruby and\r\nbundler installed.\r\n\r\n### Ubuntu\r\n\r\n```bash\r\nsudo apt-get -y install ruby1.9.1 ruby1.9.1-dev\r\nsudo gem install bundler rake\r\nbundle install --path .bundle/gems/\r\nbundle exec guard --clear -n f\r\n```\r\n\r\n### OS X\r\n\r\n```bash\r\nsudo gem install bundler\r\nbundle install --path .bundle/gems/\r\nbundle exec guard --clear -n f\r\n```\r\n\r\n[env-demo]: http://localhost:32400/video/plex-nose-example/env\r\n[nose]: https://nose.readthedocs.org/en/latest/\r\n[mock]: http://www.voidspace.org.uk/python/mock/\r\n[example-output]: http://i.imgur.com/z2TWqix.png\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}